{"version":3,"sources":["components/ConfigScreen.tsx","components/Sidebar.tsx","index.tsx"],"names":["Config","props","onConfigure","a","sdk","app","getCurrentState","currentState","parameters","state","targetState","this","getParameters","setState","setReady","className","css","margin","Component","Sidebar","entry","sys","getSys","isPublised","publishedAt","genus","fields","getValue","species","useState","isCreatingPlant","setIsCreatingPlant","codeStart","slice","toUpperCase","plants","setPlants","useEffect","searchQuery","content_type","id","order","space","getEntries","plantEntries","items","map","pe","code","fr","getNextPlantCode","limit","results","total","lastPlant","lastNumber","parseInt","split","nextNumberPadded","nextNumber","createNewPlant","nextCode","createEntry","commonInfo","type","linkType","newPlant","publishEntry","notifier","success","error","isFullWidth","icon","buttonType","loading","disabled","onClick","length","p","title","navigator","openEntry","slideIn","noteType","init","root","document","getElementById","location","locations","LOCATION_APP_CONFIG","component","LOCATION_ENTRY_SIDEBAR","forEach","componentLocationSetting","is","window","startAutoResizer","render"],"mappings":"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","file":"static/js/main.e230697e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppExtensionSDK } from '@contentful/app-sdk';\nimport { Heading, Form, Workbench, Paragraph } from '@contentful/forma-36-react-components';\nimport { css } from 'emotion';\n\nexport interface AppInstallationParameters {}\n\ninterface ConfigProps {\n  sdk: AppExtensionSDK;\n}\n\ninterface ConfigState {\n  parameters: AppInstallationParameters;\n}\n\nexport default class Config extends Component<ConfigProps, ConfigState> {\n  constructor(props: ConfigProps) {\n    super(props);\n    this.state = { parameters: {} };\n\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    props.sdk.app.onConfigure(() => this.onConfigure());\n  }\n\n  async componentDidMount() {\n    // Get current parameters of the app.\n    // If the app is not installed yet, `parameters` will be `null`.\n    const parameters: AppInstallationParameters | null = await this.props.sdk.app.getParameters();\n\n    this.setState(parameters ? { parameters } : this.state, () => {\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      this.props.sdk.app.setReady();\n    });\n  }\n\n  onConfigure = async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await this.props.sdk.app.getCurrentState();\n\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: this.state.parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState,\n    };\n  };\n\n  render() {\n    return (\n      <Workbench className={css({ margin: '80px' })}>\n        <Form>\n          <Heading>Sidebar: Plants</Heading>\n          <Paragraph>No additional configuration required :)</Paragraph>\n        </Form>\n      </Workbench>\n    );\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Button, EntityList, EntityListItem, Note, Paragraph } from '@contentful/forma-36-react-components';\nimport { SidebarExtensionSDK } from '@contentful/app-sdk';\nimport './Sidebar.css';\n\ninterface SidebarProps {\n  sdk: SidebarExtensionSDK;\n}\n\nconst Sidebar = ({sdk}: SidebarProps) => {\n  const entry = sdk.entry;\n  const sys = entry.getSys();\n  const isPublised = !!sys.publishedAt;\n  const genus = entry.fields['genus'].getValue() as string ?? '';\n  const species = entry.fields['species'].getValue() as string ?? '';\n  const [isCreatingPlant, setIsCreatingPlant] = useState(false);\n  const codeStart = (genus.slice(0, 2) + species.slice(0, 2)).toUpperCase();\n  const [plants, setPlants] = useState<any[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      const searchQuery = {\n        content_type: 'plant',\n        'fields.commonInfo.sys.id': sys.id,\n        order: 'fields.code'\n      }\n  \n      const plantEntries = await sdk.space.getEntries(searchQuery);\n\n      setPlants(plantEntries.items.map((pe: any) => ({\n        id: pe.sys.id,\n        code: pe.fields.code.fr\n      })));\n    })()\n  }, [sdk, sys]);\n\n  const getNextPlantCode = async () => {\n    const searchQuery = {\n      content_type: 'plant',\n      'fields.code[match]': codeStart,\n      order: '-fields.code',\n      limit: 1\n    }\n\n    const results = await sdk.space.getEntries(searchQuery);\n\n    if (results.total === 0) {\n      return `${codeStart}-01`;\n    }\n\n    const lastPlant: any = results.items[0];\n    const lastNumber = parseInt(lastPlant.fields.code.fr.split('-')[1]);\n    const nextNumber = lastNumber + 1;\n    const nextNumberPadded = nextNumber < 10 ? `0${nextNumber}` : nextNumber;\n\n    return `${codeStart}-${nextNumberPadded}`\n  }\n\n  const createNewPlant = async () => {\n    setIsCreatingPlant(true);\n\n    try {\n      const nextCode = await getNextPlantCode();\n\n      const newPlant: any = await sdk.space.createEntry('plant', {\n        fields: {\n          commonInfo: {\n            fr: {\n              sys: {\n                type: 'Link',\n                linkType: 'Entry',\n                id: sys.id\n              }\n            }\n          },\n          code: {\n            fr: nextCode\n          }\n        }\n      });\n\n      await sdk.space.publishEntry(newPlant);\n\n      setPlants([...plants, {id: newPlant.sys.id, code: newPlant.fields.code.fr}]);\n\n      sdk.notifier.success(`Plant ${newPlant.fields.code.fr} created!`);\n    } catch (e) {\n      sdk.notifier.error(`Could not create a new plant :(`);\n    }\n\n    setIsCreatingPlant(false);\n  }\n\n  return <div>\n    {isPublised ? \n      <>\n        <Button isFullWidth={true} \n          icon=\"Plus\" \n          buttonType=\"positive\" \n          loading={isCreatingPlant} \n          disabled={isCreatingPlant}\n          onClick={() => createNewPlant()}\n        >{isCreatingPlant ? 'Creating' : 'Create'} new <b>{codeStart}</b></Button>\n        {plants.length > 0 ? \n          <EntityList className=\"plant-entity-list\">\n            {plants.map(p => (\n              <EntityListItem key={p.id} \n                title={p.code} \n                onClick={() => sdk.navigator.openEntry(p.id, {slideIn: true})}\n                className=\"plant-entity-list-item\"\n              />\n            ))}\n          </EntityList>\n          : <Paragraph className=\"plant-entity-list-empty\">No plants for this entry.</Paragraph>\n        }\n      </> : <Note noteType=\"warning\">Cannot create a plant until this entry is <b>published</b></Note>\n    }\n  </div>;\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport {\n  AppExtensionSDK,\n  SidebarExtensionSDK,\n  init,\n  locations,\n} from '@contentful/app-sdk';\nimport '@contentful/forma-36-react-components/dist/styles.css';\nimport '@contentful/forma-36-fcss/dist/styles.css';\nimport '@contentful/forma-36-tokens/dist/css/index.css';\nimport './index.css';\n\nimport Config from './components/ConfigScreen';\nimport Sidebar from './components/Sidebar';\n\ninit((sdk) => {\n  const root = document.getElementById('root');\n\n  // All possible locations for your app\n  // Feel free to remove unused locations\n  // Dont forget to delete the file too :)\n  const ComponentLocationSettings = [\n    {\n      location: locations.LOCATION_APP_CONFIG,\n      component: <Config sdk={sdk as AppExtensionSDK} />,\n    },\n    {\n      location: locations.LOCATION_ENTRY_SIDEBAR,\n      component: <Sidebar sdk={sdk as SidebarExtensionSDK} />,\n    },\n  ];\n\n  // Select a component depending on a location in which the app is rendered.\n  ComponentLocationSettings.forEach((componentLocationSetting) => {\n    if (sdk.location.is(locations.LOCATION_ENTRY_SIDEBAR)) {\n      (sdk as SidebarExtensionSDK).window.startAutoResizer();\n    }\n\n    if (sdk.location.is(componentLocationSetting.location)) {\n      render(componentLocationSetting.component, root);\n    }\n  });\n});"],"sourceRoot":""}